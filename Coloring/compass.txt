
N: Length of coloring
K: Length of contained MAS
C: Number of colors

V(K,C): The lowest N for which there is no coloring with no MAS
V(4,2) = 35


Problem
=======

For various Ks (4,5,6), as N increases, try to find a 2-coloring without
MASs by flipping coins. Keep track of if such a 2-coloring exists, what it
is, how many iterations it took to find it, and how much time that took.

With all the data, make graphs!

When done, generalize to non-monochromatic sequences. For instance,
instead of
    a a+d a+2d a+3d
do
    a     a+2d a+3d
or
    a a+d      a+3d
or
    a a+d^2 a+d^2


^^
IMPLEMENT: Spacing, so the mask 111
encapsulates 111, 10101, 1001001, 100010001, etc.

-----
take a coloring(C, N)
See if exists two points same color square apart
Record how long it takes to find a coloring for which this exists

----
If we can make the program 4x faster by uniformly corrupting half
the trials, then we can interpret the output accordingly and
effectively double the program speed

----
Hill climbing:
Goal changes to: try to find ONE satisfactory coloring as smartly as
possible.
For instance, for N=100 C=2 mask=1001001, start with a random coloring
and if there is a MMP, smartly modify the coloring to try to hill-climb
towards a coloring without the MMP

---
TODO LIST
- Implement spacing
- Refactor terminal io
- Hill climbing
- Write report

